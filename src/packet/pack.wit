package acts:packs;

interface types {

  type map = list<tuple<string, value>>;
  variant value {
    null,
    boolean(bool),
    pos-int(u64),
    neg-int(s64),
    float(float64),
    text(string),
  }

  variant packet {
    req(request),
    msg(message),
    chain(chain),
    each(each),
    call(call),
  }

  record request {
    id: string,
    key: option<string>,
    tag: option<string>,
    name: option<string>,
    inputs: map,
    outputs: map,
  }

  record request-events {
    on-created: list<packet>,
    on-completed: list<packet>,
  }

  record message {
    id: string,
    key: option<string>,
    tag: option<string>,
    name: option<string>,
    inputs: map,
  }

  record chain {
    ins: list<string>,
  }

  record each {
    ins: list<string>,
  }

  record call {
    id: string,
    mid: string,
    inputs: map,
    outputs: map,
  }

}

interface act {
  use types.{value, request, message, packet, call, chain, each, request-events};

  inputs: func() -> list<tuple<string,value>>;
  set-data: func(key:string, value:value);
  set-output: func(key:string, value:value);

  complete: func();
  abort: func();
  back: func(nid: string);
  fail: func(ecode: string, message: string);
  skip: func();

  push: func(p: packet);
  push-req: func(req: request, events: request-events);
  push-msg: func(chain: message);
  push-chain: func(chain: chain);
  push-each: func(each: each);
  push-block: func(block: list<packet>, next: option<list<packet>>);
  push-call: func(c: call);
}

interface log {
    info: func(message: string);
    error: func(message: string);
    warn: func(message: string);
}

world pack {
    import act;
    import log;

    export run: func();
}